package fr.ign.cogit;

import java.io.File;
import java.util.List;

import fr.ign.cogit.geoxygene.api.feature.IFeature;
import fr.ign.cogit.geoxygene.api.feature.IFeatureCollection;
import fr.ign.cogit.geoxygene.api.spatial.coordgeom.IPolygon;
import fr.ign.cogit.geoxygene.api.spatial.geomaggr.IMultiCurve;
import fr.ign.cogit.geoxygene.api.spatial.geomprim.IOrientableCurve;
import fr.ign.cogit.geoxygene.convert.FromGeomToLineString;
import fr.ign.cogit.geoxygene.convert.FromGeomToSurface;
import fr.ign.cogit.geoxygene.sig3d.calculation.parcelDecomposition.OBBBlockDecomposition;
import fr.ign.cogit.geoxygene.spatial.coordgeom.DirectPosition;
import fr.ign.cogit.geoxygene.spatial.geomaggr.GM_MultiCurve;
import fr.ign.cogit.geoxygene.util.conversion.ShapefileReader;
import fr.ign.cogit.geoxygene.util.conversion.ShapefileWriter;
import fr.ign.cogit.geoxygene.util.conversion.WktGeOxygene;
import fr.ign.cogit.util.GetFromGeom;

public class Test {


	public static void main(String[] args) throws Exception {
		
		DirectPosition.PRECISION = 5;
		
 		String strMuliPol = "POLYGON ((928554.27000000001862645 6693894.55999999959021807, 928568.97999999998137355 6693909.84999999962747097, 928575.32999999995809048 6693916.59999999962747097, 928576.33999999996740371 6693917.92999999970197678, 928576.76000000000931323 6693919.59999999962747097, 928576.93999999994412065 6693921.04999999981373549, 928576.98999999999068677 6693924.88999999966472387, 928576.85999999998603016 6693927.51999999955296516, 928576.55000000004656613 6693930.15000000037252903, 928575.92000000004190952 6693933.11000000033527613, 928575.17000000004190952 6693935.73000000044703484, 928574.26000000000931323 6693938.30999999959021807, 928572.76000000000931323 6693941.38999999966472387, 928569.41000000003259629 6693946.75, 928570.66000000003259629 6693947.9599999999627471, 928599.2900000000372529 6693975.55999999959021807, 928612.11999999999534339 6693987.7900000000372529, 928624.55000000004656613 6693977.65000000037252903, 928699.59999999997671694 6693914.73000000044703484, 928715.57999999995809048 6693901.03000000026077032, 928727.58999999996740371 6693911.9599999999627471, 928741.43999999994412065 6693924.59999999962747097, 928755.19999999995343387 6693937.30999999959021807, 928808.76000000000931323 6693891.04999999981373549, 928744.2099999999627471 6693832.09999999962747097, 928743.07999999995809048 6693831.30999999959021807, 928720.68999999994412065 6693812.88999999966472387, 928714.39000000001396984 6693807.75999999977648258, 928689.83999999996740371 6693787.91000000014901161, 928679.67000000004190952 6693779.5400000000372529, 928676.01000000000931323 6693782.45000000018626451, 928664.06999999994877726 6693794.80999999959021807, 928661.98999999999068677 6693796.98000000044703484, 928659.19999999995343387 6693799.96999999973922968, 928652.11999999999534339 6693807.41999999992549419, 928644.91000000003259629 6693814.73000000044703484, 928637.9599999999627471 6693822.28000000026077032, 928637.68000000005122274 6693822.0400000000372529, 928636.06000000005587935 6693820.5400000000372529, 928621.44999999995343387 6693838.13999999966472387, 928619.75 6693839.79999999981373549, 928575.34999999997671694 6693877.33999999985098839, 928570.2099999999627471 6693881.5400000000372529, 928565.61999999999534339 6693885.32000000029802322, 928554.27000000001862645 6693894.55999999959021807))";
 		 double roadEpsilon = 0;
         double noise = 0;
        double maximalArea = 1200;
        double maximalWidth = 50;
		
		// Exterior from the UrbanBlock if necessary or null
		IMultiCurve<IOrientableCurve> imC = null;
		// Roads are created for this number of decomposition level
		int decompositionLevelWithRoad = 2;
		// Road width
		double roadWidth = 5.0;
		// Boolean forceRoadaccess
		boolean forceRoadAccess = true;

		IPolygon pol = (IPolygon) FromGeomToSurface.convertGeom(WktGeOxygene.makeGeOxygene(strMuliPol)).get(0);
		

		
			String inputUrbanBlock = GetFromGeom.getIlots(new File("/home/mcolomb/informatique/ArtiScales/dataGeo")).getAbsolutePath();
			IFeatureCollection<IFeature> featC = ShapefileReader.read(inputUrbanBlock);
			List<IOrientableCurve> lOC = FromGeomToLineString.convert(featC.get(0).getGeom());
			IMultiCurve<IOrientableCurve>	iMultiCurve = new GM_MultiCurve<>(lOC);
	
		
		OBBBlockDecomposition decomposition = new OBBBlockDecomposition(pol, maximalArea, maximalWidth, roadEpsilon, iMultiCurve, decompositionLevelWithRoad, roadWidth, forceRoadAccess);
		IFeatureCollection<IFeature> featColl = decomposition.decompParcel(noise);

		ShapefileWriter.write(featColl, "/tmp/tmp.shp");

	}

}
